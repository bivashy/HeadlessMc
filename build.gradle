import io.franzbecker.gradle.lombok.task.DelombokTask

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
}

repositories {
    mavenCentral()
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'io.franzbecker.gradle-lombok'

    group 'me.earth.headlessmc'
    version rootProject.project_version

    repositories {
        mavenCentral()
        maven {
            name '3arthMaven'
            url 'https://3arthqu4ke.github.io/maven'
        }

        maven {
            name 'JitPackMaven'
            url 'https://jitpack.io'
        }
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileJava {
        if (JavaVersion.current().isJava9Compatible()) {
            options.compilerArgs.addAll(['--release', '8'])
        }
    }

    configurations {
        jarLibs
        jarLibsApi
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.26'
        annotationProcessor 'org.projectlombok:lombok:1.18.26'

        testCompileOnly 'org.projectlombok:lombok:1.18.26'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

        implementation configurations.jarLibs
        api configurations.jarLibsApi
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "failed"
            exceptionFormat "full"
        }

        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
    }

    jar {
        archivesBaseName = project.name
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    java {
        // because we are using lomboks var
        if (!JavaVersion.current().isJava9Compatible()) {
            withSourcesJar()
            withJavadocJar()
        }
    }

    // TODO: even though we are doing all of this Intellij
    //  still complains about bytecode not matching the source...
    if (sourceSets.main.java.srcDirs.stream().anyMatch { it.exists()}
            // var keyword causes issues in DelombokTask with newer jdks
        && !JavaVersion.current().isJava9Compatible()) {
        tasks.register('delombok', DelombokTask) {
            dependsOn compileJava
            ext.outputDir = file(buildDir.toPath().resolve('delombok'))
            outputs.dir(ext.outputDir)
            sourceSets.main.java.srcDirs.each {
                if (it.exists()) {
                    inputs.dir(it)
                    args(it, '-f', 'suppressWarnings:skip',
                             '-f', 'generated:skip',
                             '-f', 'danceAroundIdeChecks:skip',
                             '-f', 'generateDelombokComment:skip',
                             '-f', 'javaLangAsFQN:skip',
                             '-d', ext.outputDir)
                }
            }
        }

        javadoc {
            dependsOn delombok
            source = delombok.outputDir
            options.addStringOption('Xdoclint:none', '-quiet')
            options.linkSource true
        }

        sourcesJar {
            dependsOn delombok
            from delombok.outputDir
            // I tried every single exclude/include pattern but I could not get any to work
            exclude (fileTreeElement -> {
                return !((FileTreeElement) fileTreeElement)
                    .getFile()
                    .toPath()
                    .toAbsolutePath()
                    .startsWith(delombok.outputDir.toPath().toAbsolutePath())
            })
        }
    }

    jar {
        classifier 'dev'
    }

    shadowJar {
        configurations = [project.configurations.jarLibs, project.configurations.jarLibsApi]
        classifier ''
    }

    jar.finalizedBy(shadowJar)

    // since we are not creating javadoc and sources on java 9+ skip
    if (!JavaVersion.current().isJava9Compatible()) {
        def pubSuffix = System.getenv('IS_MAVEN_PUB') != null
                ? ''
                : System.getenv('GITHUB_RUN_NUMBER') != null && System.getenv('GITHUB_SHA') != null
                ? "-${System.getenv('GITHUB_RUN_NUMBER')}-${System.getenv('GITHUB_SHA').substring(0, 7)}"
                : '-local'

        publishing {
            publications {
                "${project.name.toLowerCase()}"(MavenPublication) {
                    ((MavenPublication) it).groupId "${project.group}"
                    ((MavenPublication) it).artifactId "${project.archivesBaseName.toLowerCase()}"
                    ((MavenPublication) it).version "${project.version}${pubSuffix}"
                    // TODO: testFixtures are part of commons artifact?
                    from components.java
                }
            }

            repositories {
                // mavenLocal()
                if (System.getenv('DEPLOY_TO_GITHUB_PACKAGES_URL') != null) {
                    maven {
                        name = 'GithubPagesMaven'
                        url = System.getenv('DEPLOY_TO_GITHUB_PACKAGES_URL')
                        credentials {
                            username = System.getenv('GITHUB_USER')
                            password = System.getenv('GITHUB_TOKEN')
                        }
                    }
                } else {
                    maven {
                        name = 'BuildDirMaven'
                        url = rootProject.layout.buildDirectory.dir('maven')
                    }
                }
            }
        }

        publish {
            dependsOn(build)
        }
    }
}

dependencies {
    // create maven publication that contains all modules
    api project(':headlessmc-api')
    api project(':headlessmc-commons')
    api project(':headlessmc-launcher')
    api project(':headlessmc-lwjgl')
    api project(':headlessmc-runtime')
}

tasks.register('jacocoRootReport', JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.test)

    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled true
        xml.enabled true
    }
}

tasks.register('copyJars', Copy) {
    dependsOn subprojects.shadowJar
    from(subprojects.shadowJar)
    into project.file(System.getProperty('hmc.jar.dir', 'build/libs'))
}

build {
    dependsOn(subprojects.shadowJar)
    finalizedBy(copyJars)
}

// the launchers report will otherwise contain coverage data about some of the
// libraries we use in those two jars, e.g. xdarks Deencapsulation
//noinspection ConfigurationAvoidance (idk does not seem to work with it)
tasks.withType(JacocoReport) {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/headlessmc/headlessmc-runtime.jar',
                '**/headlessmc/headlessmc-lwjgl.jar',
                '**/headlessmc/forge-cli.jar',
            ])
        }))
    }
}

allprojects {
    afterEvaluate {
        tasks.withType(GenerateMavenPom).configureEach {
            if (it.pom == null) {
                return
            }
            it.pom.withXml {
                asNode().dependencies.dependency.each { dependency ->
                    if (dependency.artifactId.last().value().last() in ['junit-jupiter-api', 'junit-jupiter-engine', 'forgecli']) {
                        assert dependency.parent().remove(dependency)
                    }
                }
            }
        }
    }
}
